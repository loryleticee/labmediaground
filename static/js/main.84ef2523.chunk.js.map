{"version":3,"sources":["services/youtube/youtube.js","components/UI/Home/Home.js","serviceWorker.js","index.js"],"names":["URL","process","REACT_APP_YOUTUBE_API_TOKEN","Youtube","props","useState","videos","setVideos","init","id","videoId","useEffect","vdz","fetch","then","response","json","catch","err","data","length","undefined","items","className","scrolling","frameBorder","allow","src","key","title","map","video","index","Home","you","setYou","Helmet","charSet","name","content","property","itemProp","rel","href","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wPAEMA,EAAM,4GAA4GC,8CAAYC,4BAkFrHC,EA1EE,SAACC,GAAW,IAAD,EAEIC,mBAAS,IAFb,mBAEjBC,EAFiB,KAETC,EAFS,KAGlBC,EAAO,CACT,CACIC,GACE,CACIC,QAAS,gBAGnB,CACID,GACE,CACIC,QAAS,gBAGnB,CACID,GACE,CACIC,QAAS,iBAuBvB,OAlBCC,qBAAU,WACN,IAAIC,EAAMN,EA9BRO,MAAMb,GACVc,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAG,OAAIA,GAAO,MA6BNJ,MAAK,SAAAK,GACb,GAAIP,EAAIQ,OAAS,OACX,CAGF,GAFAR,EAAM,CAAC,GAAG,SAEWS,IAAlBF,EAAI,MAIH,YAHAZ,EACEC,GAIND,EAAUY,EAAKG,aAGzB,CAAChB,IAGF,oCACE,yBAAKiB,UAAU,cACb,yBAAKA,UAAU,gBACX,4BACEC,UAAU,KAAKC,YAAY,KAC3BC,MAAM,WACNC,IAAI,qGACJC,IAAK,EACLC,MAAM,OAIZ,yBAAKN,UAAW,kBAERjB,EAAOwB,KAAI,SAACC,EAAOC,GACf,OACE,4BACEH,MAAOG,EACPJ,IAAMI,EACNL,IAAG,wCAAmCI,EAAMtB,GAAGC,SAC/Ce,YAAY,a,QC1BvBQ,EA1CF,WAAO,IAAD,EACK5B,mBAAS,IADd,mBACV6B,EADU,KACLC,EADK,KASf,OANFxB,qBAAU,WACLuB,EAAId,OAAS,GACde,EAAO,CAAC,EAAE,MAEZ,CAACD,EAAId,SAEFc,EAAId,OAAS,EAEZ,oCACE,kBAACgB,EAAA,OAAD,KACE,0BAAMC,QAAQ,UACd,0BAAMC,KAAK,cAAcC,QAAQ,qBACjC,0BAAMC,SAAS,eAAeD,QAAQ,eACtC,0BAAMC,SAAS,WAAWD,QAAQ,eAClC,0BAAMC,SAAS,SAASD,QAAQ,+BAChC,0BAAMC,SAAS,UAAUD,QAAQ,YACjC,0BAAMC,SAAS,iBAAiBD,QAAQ,mCACxC,0BAAME,SAAS,OAAOF,QAAQ,UAC9B,0BAAME,SAAS,MAAMF,QAAQ,+BAC7B,0BAAME,SAAS,cAAcF,QAAQ,mCACrC,0BAAMD,KAAK,gBAAgBC,QAAQ,UACnC,0BAAMD,KAAK,cAAcC,QAAQ,+BACjC,0BAAMD,KAAK,eAAeC,QAAQ,YAClC,0BAAMD,KAAK,sBAAsBC,QAAQ,mCACzC,0BAAMD,KAAK,cAAcC,QAAQ,mCACjC,8CACA,0BAAMG,IAAI,YAAYC,KAAK,gCAE7B,kBAAC,EAAD,OAKN,oCACE,2DC9BcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBCJNC,IAASC,OACP,kBAAC,IAAD,KACI,yBAAK3B,UAAW,aACZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,IAAIC,UAAWpB,OAIzCqB,SAASC,eAAe,SD6GxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.84ef2523.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\n\nconst URL = \"https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=3&order=date&q=ayrlo&type=video&key=\"+process.env.REACT_APP_YOUTUBE_API_TOKEN;\n\n const getVideos = () => {\n    return fetch(URL)\n      .then(response => response.json())\n      .catch(err => err || {});\n};\n\n const Youtube = (props) => {\n\n    const [videos, setVideos] = useState([]);\n    const init = [\n        {\n            id :\n              {\n                  videoId: \"kPEA6Kc-6sc\"\n              }\n        },\n        {\n            id :\n              {\n                  videoId: \"STaNwmExtHg\"\n              }\n        },\n        {\n            id :\n              {\n                  videoId: \"r1qllo-mnP8\"\n              }\n        },\n    ];\n\n     useEffect(() =>{\n         let vdz = videos;\n         getVideos().then(data => {\n             if (vdz.length > 0 ) {\n             } else{\n                 vdz = ['',''];\n\n                 if(data['error'] !== undefined){\n                     setVideos(\n                       init\n                     );\n                     return;\n                 }\n                 setVideos(data.items);\n             }\n         });\n     },[videos]);\n\n    return (\n      <>\n        <div className=\"page-group\">\n          <div className=\"social-group\">\n              <iframe\n                scrolling=\"no\" frameBorder=\"no\"\n                allow=\"autoplay\"\n                src=\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/127696064&color=%236e9dc7\"\n                key={1}\n                title=\"1\"\n              >\n              </iframe>\n          </div>\n          <div className={\"youtube-canvas\"}>\n              {\n                  videos.map((video, index) => {\n                      return (\n                        <iframe\n                          title={index}\n                          key ={index}\n                          src={`https://www.youtube.com/embed/${video.id.videoId}`}\n                          frameBorder=\"0\"\n                        />\n                      )\n                  })\n              }\n          </div>\n      </div>\n    </>\n    );\n };\n\nexport default Youtube;\n","import React, {useEffect, useState} from \"react\";\nimport \"./Home.scss\";\nimport Youtube from \"../../../services/youtube/youtube\";\nimport {Helmet} from \"react-helmet\";\n\nconst Home = () => {\n  const [you, setYou] = useState([]);\n\n  useEffect(() => {\n    if(you.length < 1){\n      setYou([1,2])\n    }\n  },[you.length]);\n\n    if(you.length > 0){\n      return (\n        <>\n          <Helmet>\n            <meta charSet=\"utf-8\" />\n            <meta name=\"description\" content=\"Nested component\" />\n            <meta property=\"og:site_name\" content=\"Ayrlomusic\"/>\n            <meta property=\"og:title\" content=\"Ayrlomusic\"/>\n            <meta property=\"og:url\" content=\"https://www.ayrlomusic.com\"/>\n            <meta property=\"og:type\" content=\"website\"/>\n            <meta property=\"og:description\" content=\"The official website of Ayrlo.\"/>\n            <meta itemProp=\"name\" content=\"Ayrlo\"/>\n            <meta itemProp=\"url\" content=\"https://www.ayrlomusic.com\"/>\n            <meta itemProp=\"description\" content=\"The official website of Ayrlo.\"/>\n            <meta name=\"twitter:title\" content=\"Ayrlo\"/>\n            <meta name=\"twitter:url\" content=\"https://www.ayrlomusic.com\"/>\n            <meta name=\"twitter:card\" content=\"summary\"/>\n            <meta name=\"twitter:description\" content=\"The official website of Ayrlo.\"/>\n            <meta name=\"description\" content=\"The official website of Ayrlo.\"/>\n            <title>Ayrlo Music</title>\n            <link rel=\"canonical\" href=\"https://www.ayrlomusic.com\" />\n          </Helmet>\n          <Youtube/>\n        </>\n      );\n    }\n  return (\n    <>\n      <small>Wainting for a moment </small>\n    </>\n  );\n};\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./components/UI/Home/Home.scss\";\nimport Home from \"./components/UI/Home/Home\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n      <div className={'page-full'} >\n          <Switch>\n              <Route exact path=\"/\" component={Home}/>\n          </Switch>\n      </div>\n  </Router>\n    , document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}