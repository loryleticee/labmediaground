{"version":3,"sources":["services/youtube/youtube.js","components/UI/Home/Home.js","serviceWorker.js","index.js"],"names":["getVideos","fetch","then","response","json","catch","err","Home","useState","videos","setVideos","useEffect","vdz","data","length","console","log","items","className","map","video","index","target","key","href","id","videoId","title","src","snippet","thumbnails","default","url","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yPAQeA,EANU,WACrB,OAAOC,MAHC,0IAILC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAG,OAAIA,GAAO,OCiCZC,EAlCF,WAAO,IAAD,EACWC,mBAAS,IADpB,mBACVC,EADU,KACFC,EADE,KAcf,OAZFC,qBAAU,WACR,IAAIC,EAAMH,EACVT,IAAYE,MAAK,SAAAW,GACXD,EAAIE,OAAS,IAEjBF,EAAM,CAAC,GAAG,IACVG,QAAQC,IAAI,SAAUH,EAAKI,OACzBP,EAAUG,EAAKI,aAGnB,CAACR,IAGG,yBAAKS,UAAU,qFAETT,EAAOU,KAAI,SAACC,EAAOC,GACnB,OACE,uBAAGC,OAAQ,SAAUC,IAAKF,EAAOG,KAAI,wCAAmCJ,EAAMK,GAAGC,SAAWR,UAAU,cACpG,yBACES,MAAON,EACPE,IAAKF,EACLH,UAAU,kBACVU,IAAKR,EAAMS,QAAQC,WAAWC,QAAQC,YChBtCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBCHNC,IAASC,OAED,kBAAC,IAAD,KACI,yBAAKrB,UAAW,gCACZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,IAAIC,UAAWnC,OAI/CoC,SAASC,eAAe,SD2GxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,kB","file":"static/js/main.791189e0.chunk.js","sourcesContent":["const URL = \"https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=30&q=ayrlo&type=video&key=\"+process.env.REACT_APP_YOUTUBE_API_TOKEN;\n\nexport const getVideos = () => {\n    return fetch(URL)\n      .then(response => response.json())\n      .catch(err => err || {});\n};\n\nexport default getVideos;","import React, {useEffect, useState} from \"react\";\nimport \"./Home.scss\";\nimport getVideos from \"../../../services/youtube/youtube\";\n\nconst Home = () => {\n  const [videos, setVideos] = useState([]);\n  useEffect(() =>{\n    let vdz = videos;\n    getVideos().then(data => {\n      if (vdz.length > 0 ) {\n      } else{\n      vdz = ['',''];\n      console.log('SUCCES', data.items)\n        setVideos(data.items);\n      }\n    });\n  },[videos]);\n\n    return (\n        <div className=\"d-flex flex-column ml-auto mr-5 my-5 align-content-center flex-wrap overflow-auto\">\n            {\n              videos.map((video, index) => {\n              return (\n                <a target={\"_blank\"} key={index} href={`https://www.youtube.com/embed/${video.id.videoId}`} className=\"w-100 my-3\">\n                  <img\n                    title={index}\n                    key={index}\n                    className=\"flex-wrap w-100\"\n                    src={video.snippet.thumbnails.default.url}\n                  />\n                </a>\n                )\n              })\n            }\n        </div>\n    );\n};\n\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./components/UI/Home/Home.scss\";\nimport Home from \"./components/UI/Home/Home\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\n\nReactDOM.render(\n\n        <Router>\n            <div className={'d-flex flex-column page-full'} >\n                <Switch>\n                    <Route exact path=\"/\" component={Home}/>\n                </Switch>\n            </div>\n        </Router>\n    , document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}