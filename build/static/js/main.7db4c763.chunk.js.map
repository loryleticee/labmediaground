{"version":3,"sources":["components/App/MessageItem.js","containers/ShowMessage.js","services/websocket.js","actions/index.js","components/App/MessageList.js","components/App/MessageBar.js","translations/index.js","translations/fr.js","translations/en.js","components/UI/Chat/Chat.js","services/youtube/youtube.js","components/UI/Home/Home.js","serviceWorker.js","reducers/Chat.js","reducers/index.js","reducers/Log.js","index.js"],"names":["MessageItem","props","date","message","sentAt","Date","toDateString","username","text","DivMsg","styled","div","ShowMessage","className","ws","WebSocket","onopen","console","log","onmessage","evt","JSON","parse","data","store","dispatch","addMessage","action","type","send","stringify","MessageList","useDispatch","messages","useSelector","state","messageList","useEffect","axios","get","then","json","catch","err","error","map","index","key","MessageBar","useState","messageContent","setMessageContent","name","value","onChange","e","target","onClick","preventDefault","translate","locale","navigator","language","DivChat","Welcome","Chat","id","getVideos","fetch","response","Home","videos","setVideos","u","length","items","video","title","width","height","src","videoId","frameBorder","Boolean","window","location","hostname","match","INIT_STATE","adminReducer","combineReducers","newState","concat","newData","msg","forEach","createStore","compose","applyMiddleware","ReduxThunk","next","ReactDOM","render","to","exact","path","component","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7db4c763.chunk.js","sourcesContent":["import React from \"react\";\nimport Emoji from \"react-emoji-render\";\nimport PropTypes from \"prop-types\";\n\nconst MessageItem = (props) => {\n    const date = (date) => {\n        if (date instanceof Date  ) {\n            return date.toDateString();\n        } else {\n            return date;\n        }\n    };\n\n    return (\n        <div>\n            <span>\n                <small>{date(props.message.sentAt)} </small>\n                <small> {`@ ${props.message.username}`} </small>\n                <Emoji text = {`Â¬ ${props.message.message}`} />\n            </span>\n        </div>\n    );\n};\n\nMessageItem.propTypes = {\n    message: PropTypes.object.isRequired\n};\nexport default MessageItem;","import React from \"react\";\nimport styled from \"styled-components\";\nconst className = \"alert-info\";\n\nconst DivMsg  = styled.div`\n    color   : pink;\n    margin  : 10px;\n`;\n\nconst ShowMessage = (props) => {\n    return (\n        <DivMsg className = {className}> {props.message} </DivMsg>\n    )\n};\n\nexport default ShowMessage;\n\n","import {store} from \"../\";\nimport {addMessage} from \"../actions\";\n\nexport const ws = new WebSocket(\"wss://srrj6.sse.codesandbox.io\");\n\nws.onopen = () => {\n    // on connecting, do nothing but log it to the console\n    console.log(\"connected\")\n};\n\nws.onmessage = evt => {\n    // listen to data sent from the websocket server\n    const message = JSON.parse(evt.data);\n    //this.setState({dataFromServer: message});\n    store.dispatch(addMessage(message));\n};","import axios from \"axios\";\nimport {ws} from \"../services/websocket\";\n\nconst URL = \"https://my-json-server.typicode.com/tlenclos/formation-react-fake-server/messages\";\n\nexport const ADD_MESSAGE            = \"ADD_MESSAGE\";\nexport const LOAD_MESSAGE_PENDING   = \"LOAD_MESSAGE_PENDING\";\nexport const LOAD_MESSAGE_SUCCESS   = \"LOAD_MESSAGE_SUCCESS\";\nexport const LOAD_MESSAGE_ERROR     = \"LOAD_MESSAGE_ERROR\";\n\nexport const LOG_USER               = \"LOG_USER\";\n\nexport const logUser = (username) => ({\n    type    : LOG_USER,\n    username,\n});\n\nexport const addMessage = (message) => {\n    const action = {\n        type        : ADD_MESSAGE,\n        username    : message.username,\n        message     : message.message,\n        sentAt      : new Date(),\n    };\n    ws.send(JSON.stringify(action));\n\n    return action;\n};\n\nexport const getMessages = () => {\n    return (dispatch) => {\n        dispatch({type: LOAD_MESSAGE_PENDING});\n        return axios.get(URL)\n            .then(json => {\n                dispatch({type: LOAD_MESSAGE_SUCCESS, messages: json.data})\n            })\n            .catch(err => {\n                dispatch({type: LOAD_MESSAGE_ERROR, error: err})})\n    }\n};","import React, {useEffect} from \"react\";\nimport MessageItem from \"./MessageItem\";\nimport ShowMessage from \"../../containers/ShowMessage\";\nimport {useSelector} from \"react-redux\";\nimport {getMessages} from \"../../actions\";\nimport {useDispatch} from \"react-redux\";\n\nconst MessageList = () => {\n\nconst dispatch = useDispatch();\nconst messages = useSelector(state => state.messageList);\n\n    useEffect(() => {\n        dispatch(getMessages())\n    }, [dispatch]);\n\n    return (\n        <ShowMessage\n            message = { messages.map( (message, index) =>\n                    <MessageItem key= {index} message= {message} />\n                )\n            }\n        />\n    );\n};\n\nexport default MessageList;","import React, {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {addMessage} from \"../../actions\";\n\nconst MessageBar = (props) => {\n    const [messageContent, setMessageContent] = useState(\"\");\n\n    const username = useSelector(state => state.username);\n    const dispatch = useDispatch();\n\n    const catchSubmit = (e) => {\n        e.preventDefault();\n\n        if (messageContent) {\n            let message = {\n                username    : username,\n                message     : messageContent,\n            };\n           dispatch(addMessage(message))\n        }\n\n        setMessageContent(\"\");\n   };\n    return (\n        <div >\n            <input\n                type        = \"text\"\n                className   = \"{}\"\n                name        = \"msg_value\"\n                value       = {messageContent}\n                onChange    = { (e) => setMessageContent (e.target.value) }\n            />\n            <input\n                type        = \"submit\"\n                className   = \"{}\"\n                name        = \"submit_button\"\n                onClick     = {catchSubmit}\n            />\n        </div>\n    );\n};\n\nexport default MessageBar;","import {messages_en} from \"./en\";\nimport {messages_fr} from \"./fr\";\n\nconst FR = \"fr-FR\";\nconst US = \"en-US\";\n\nexport const translate = (props) => {\n    switch (props) {\n        case FR :\n            return messages_fr();\n\n        case US :\n            return messages_en();\n\n        default :\n            return messages_fr();\n    }\n};","export const messages_fr = () => (\n    {\n        \"app.welcome\":\n            \"Salut les mecs\",\n    }\n);","export const messages_en = () => (\n    {\n        \"app.welcome\":\n            \"Welcome Guys\",\n    }\n);","import React from \"react\";\nimport MessageList from \"../../App/MessageList\";\nimport MessageBar from \"../../App/MessageBar\";\nimport styled from \"styled-components\";\n//import {useSelector} from \"react-redux\";\n//import {Redirect} from \"react-router-dom\";\nimport {IntlProvider, FormattedMessage} from \"react-intl\";\nimport {translate} from \"../../../translations\";\n//import CheckoutForm from \"../../../services/stripe/stripe\";\n\nconst locale = navigator.language;\n\nconst DivChat  = styled.div`\n    border      : 1px;\n    padding     : 5px;\n`;\nconst Welcome  = styled.div`\n    border      : 1px;\n    padding     : 5px;\n`;\n\nconst Chat = () => {\n\n    return (\n        <IntlProvider locale={locale} messages= {translate(locale)}>\n        <DivChat className = {\"card container\"}>\n            <Welcome >\n                <FormattedMessage id=\"app.welcome\" />\n            </Welcome>\n\n            <form className = {\"container\"}>\n                <MessageList />\n                <MessageBar />\n            </form>\n            \n        </DivChat>\n        </IntlProvider>\n    );\n};\n\nexport default Chat;","const TOKEN = \"AIzaSyDt-Jo0h8x-uQ7EhMHR4GB7Ug2PY_3bt3w\";\nconst URL = \"https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=5&q=ayrlo&type=video&key=\"+TOKEN;\n\nexport const getVideos = () => {\n    return fetch(URL)\n      .then(response => response.json())\n      .catch(err => err || {});\n};\n\nexport default getVideos;","import React, {useEffect, useState} from \"react\";\nimport \"./Home.scss\";\nimport getVideos from \"../../../services/youtube/youtube\";\n\nconst Home = () => {\n\n  const [videos, setVideos] = useState([]);\n  useEffect(() =>{\n    let u = videos;\n    getVideos().then(data => {\n      if (u.length > 0 ) {\n        //setVideos(data.items);\n      } else{console.log('MISSS');\n      u = ['',''];\n        setVideos(data.items);\n      }\n    });\n  },[videos]);\n\n    return (\n      <>\n        <div className=\"page-group\">\n            {\n              videos.map((video, index) => {\n               return (\n                   <iframe\n                      title={index}\n                      key={index}\n                      className={'item'}\n                      width=\"400px\"\n                      height=\"400px\"\n                      src={`https://www.youtube.com/embed/${video.id.videoId}`}\n                      frameBorder=\"0\"\n                   />\n               )\n              })\n            }\n        </div>\n      </>\n    );\n};\n\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_MESSAGE, LOAD_MESSAGE_PENDING, LOAD_MESSAGE_ERROR, LOAD_MESSAGE_SUCCESS} from \"../actions\"\n\nconst INIT_STATE = [\n    {\n        username: \"toto\",\n        message: \"hello word\",\n        sentAt  : new Date()\n    }\n];\n\nexport const messageList = (state = INIT_STATE, action) => {\n    switch (action.type) {\n        case ADD_MESSAGE :\n            let newState = {\n                username: action.username,\n                message : action.message,\n                sentAt  : action.sentAt,\n            };\n\n            return state.concat(newState);\n\n        case LOAD_MESSAGE_PENDING:\n            return state;\n\n        case LOAD_MESSAGE_SUCCESS:\n            const newData = (msg, index) =>(\n                state.concat(msg)\n            );\n            action.messages.forEach(newData);\n\n            return  state;\n\n        case LOAD_MESSAGE_ERROR:\n            return [...state, {\n                message : action.error,\n                username: \"system\",\n                sentAt  : new Date(),\n            }];\n\n        default :\n            return state;\n    }\n};","import {combineReducers} from \"redux\";\nimport {messageList} from \"./Chat\";\nimport {userName} from \"./Log\";\n\nexport const adminReducer  = combineReducers({\n    messageList : messageList,\n    username    : userName,\n});","import {LOG_USER} from \"../actions\"\n\nconst INIT_STATE = \"\";\n\nexport const userName = (state = INIT_STATE, action) => {\n    switch (action.type) {\n        case LOG_USER :\n            return state = action.username;\n        default :\n            return state;\n    }\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./components/UI/Home/Home.scss\";\nimport Chat from \"./components/UI/Chat/Chat\";\nimport Home from \"./components/UI/Home/Home\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {applyMiddleware, compose, createStore} from \"redux\";\nimport {adminReducer} from \"./reducers\";\nimport {Provider} from \"react-redux\";\nimport ReduxThunk from \"redux-thunk\";\n//import {Elements, loadStripe} from '@stripe/react-stripe-js';\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n} from \"react-router-dom\";\n//MIDDLEWARE\nconst middleWare = store => next => action => {\n    return next(action)\n};\n\nexport const store = createStore(adminReducer,\n    compose(\n        applyMiddleware(ReduxThunk, middleWare),\n    )\n);\n\n//const stripePromise = loadStripe('pk_test_74aZGrFdqGsIl2hxXNsqsoYf00qg92oML8');\n//console.log(\"FFF\", stripePromise);\n\nReactDOM.render(\n    <Provider store = {store}>\n        <Router>\n            <div className={'page-full'} >\n                <div className={'nav-bar'}>\n                    <nav>\n                        <ul>\n                            <li>\n                                <Link to=\"/credits\">Credits</Link>\n                            </li>\n                            <li>\n                                <Link to=\"/\">\n                                    Home\n                                </Link>\n                            </li>\n                        </ul>\n                    </nav>\n\n                    <Switch>\n                        <Route exact path=\"/\" component={Home}/>\n                        <Route exact path=\"/chat\" component={Chat} />\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    </Provider>\n    , document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}